/* constants */
let WIDTH, HEIGHT;


fn clear()
{
    fputs(0, "\x1B[H\x1B[J");
}

fn board_draw(board)
{
    let x, y;

	clear();
	for y = 0 to HEIGHT {
        for x = 0 to WIDTH {
            _draw_char(board_get(board, x, y));
		}
        
		fputc(0, '\n');
	}
}

fn board_set(board, x, y, val)
{
    if _check_bounds(x, y) {
        return;
	}
    
	w8(_cell_ptr(board, x, y), val);
}

fn board_get(board, x, y)
{
    if _check_bounds(x, y) {
        return 0;
	}
    
	return ru8(_cell_ptr(board, x, y));
}

fn _cell_ptr(board, x, y)
{
    return add(board, add(mul(y, WIDTH), x));
}

fn _draw_char(v)
{
    let c;
    
	if v {
        c = 'X';
	}
	else {
        c = ' ';
	}
    
	fputc(0, c);
}

fn _check_bounds(x, y)
{
    if lt(x, 0) {
        return 1;
	}
    
	if lt(y, 0) {
        return 1;
	}
    
	if ge(x, WIDTH) {
        return 1;
	}
    
	if ge(y, HEIGHT) {
        return 1;
	}
    
	return 0;
}

fn main () {
    let board1;

    WIDTH = 200;
    HEIGHT = 65;

    board1 = 0x8000;

    draw_string(board1, 1, 0, "Hallo Welt!");
    draw_string(board1, 1, 8, "~ Tim");

    board_draw(board1);
}

fn draw_rect(board, x1, y1, dx, dy, set) {
    let x, y, xe, ye;

    xe = sub(add(x1, dx), 1);
    ye = sub(add(y1, dy), 1);

    for x = x1 to xe {
        for y = y1 to ye {
            board_set(board, x, y, set);
        }
    }
}

fn draw_string(board, x, y, str)
{
    let c;
    loop {
        c = ru8(str);
        if eq(c, '\0') {
            break;
        }
        x = add(x, draw_char(board, x, y, c));
        str = add(str, 1);
    }
}

fn draw_char(board, x, y, c)
{
    let font, set, x1, y1, i, j, byte, xe, ye;

    c = sub(c, 32);

    font = get_char_str(c);


    xe = sub(add(x, 8), 1);
    ye = sub(add(y, 8), 1);

    i = 0;

    for x1 = x to xe {
        byte = ru8(add(font, i));
        j = 0;
        for y1 = y to ye {
            set = and(shr(byte, j), 1);
            fputd(0, set);
            board_set(board, x1, y1, set);
            j = add(j, 1);
        }
        i = add(i, 1);
    }
    return 9;
}

fn get_char_str(c){
    let chars, font;

    c = mul(c, 8);

    font =
        "\x00\x00\x00\x00\x00\x00\x00\x00" /*   */
        "\x00\x00\x00\x00\x4F\x4F\x00\x00" /* ! */
        "\x00\x00\x07\x07\x00\x00\x07\x07" /* " */
        "\x00\x14\x7F\x7F\x14\x14\x7F\x7F" /* # */
        "\x00\x00\x24\x2E\x6B\x6B\x3A\x12" /* $ */
        "\x00\x00\x63\x33\x18\x0C\x66\x63" /* % */
        "\x00\x00\x32\x7F\x4D\x4D\x77\x72" /* & */
        "\x00\x00\x00\x00\x04\x06\x03\x01"/* FlippED BACktiCk */
        "\x00\x00\x00\x1C\x3E\x63\x41\x00" /* ( */
        "\x00\x00\x00\x41\x63\x3E\x1C\x00" /* ) */
        "\x00\x08\x2A\x3E\x1C\x1C\x3E\x2A" /* * */
        "\x00\x00\x08\x08\x3E\x3E\x08\x08" /* + */
        "\x00\x00\x00\x80\xE0\x60\x00\x00" /*  */
        "\x00\x00\x08\x08\x08\x08\x08\x08" /* - */
        "\x00\x00\x00\x00\x60\x60\x00\x00" /* . */
        "\x00\x00\x40\x60\x30\x18\x0C\x06" /* / */
        "\x00\x00\x3E\x7F\x49\x45\x7F\x3E" /* 0 */
        "\x00\x00\x40\x44\x7F\x7F\x40\x40" /* 1 */
        "\x00\x00\x62\x73\x51\x49\x4F\x46" /* 2 */
        "\x00\x00\x22\x63\x49\x49\x7F\x36" /* 3 */
        "\x00\x00\x18\x18\x14\x16\x7F\x7F" /* 4 */
        "\x00\x00\x27\x67\x45\x45\x7D\x39" /* 5 */
        "\x00\x00\x3E\x7F\x49\x49\x7B\x32" /* 6 */
        "\x00\x00\x03\x03\x79\x7D\x07\x03" /* 7 */
        "\x00\x00\x36\x7F\x49\x49\x7F\x36" /* 8 */
        "\x00\x00\x26\x6F\x49\x49\x7F\x3E" /* 9 */
        "\x00\x00\x00\x00\x24\x24\x00\x00" /* : */
        "\x00\x00\x00\x80\xE4\x64\x00\x00" /* ; */
        "\x00\x00\x08\x1C\x36\x63\x41\x41" /* < */
        "\x00\x00\x14\x14\x14\x14\x14\x14" /* = */
        "\x00\x00\x41\x41\x63\x36\x1C\x08" /* > */
        "\x00\x00\x02\x03\x51\x59\x0F\x06" /* ? */
        "\x00\x00\x3E\x7F\x41\x4D\x4F\x2E" /* @ */
        "\x00\x00\x7C\x7E\x0B\x0B\x7E\x7C" /* A */
        "\x00\x00\x7F\x7F\x49\x49\x7F\x36" /* B */
        "\x00\x00\x3E\x7F\x41\x41\x63\x22" /* 1 */
        "\x00\x00\x7F\x7F\x41\x63\x3E\x1C" /* D */
        "\x00\x00\x7F\x7F\x49\x49\x41\x41" /* E */
        "\x00\x00\x7F\x7F\x09\x09\x01\x01" /* F */
        "\x00\x00\x3E\x7F\x41\x49\x7B\x3A" /* G */
        "\x00\x00\x7F\x7F\x08\x08\x7F\x7F" /* H */
        "\x00\x00\x00\x41\x7F\x7F\x41\x00" /* I */
        "\x00\x00\x20\x60\x41\x7F\x3F\x01" /* J */
        "\x00\x00\x7F\x7F\x1C\x36\x63\x41" /* K */
        "\x00\x00\x7F\x7F\x40\x40\x40\x40" /* L */
        "\x00\x00\x7F\x7F\x06\x0C\x06\x7F" /* M */
        "\x00\x00\x7F\x7F\x0E\x1C\x7F\x7F" /* N */
        "\x00\x00\x3E\x7F\x41\x41\x7F\x3E" /* O */
        "\x00\x00\x7F\x7F\x09\x09\x0F\x06" /* P */
        "\x00\x00\x1E\x3F\x21\x61\x7F\x5E" /* Q */
        "\x00\x00\x7F\x7F\x19\x39\x6F\x46" /* R */
        "\x00\x00\x26\x6F\x49\x49\x7B\x32" /* S */
        "\x00\x00\x01\x01\x7F\x7F\x01\x01" /* T */
        "\x00\x00\x3F\x7F\x40\x40\x7F\x3F" /* U */
        "\x00\x00\x1F\x3F\x60\x60\x3F\x1F" /* V */
        "\x00\x00\x7F\x7F\x30\x18\x30\x7F" /* W */
        "\x00\x00\x63\x77\x1C\x1C\x77\x63" /* X */
        "\x00\x00\x07\x0F\x78\x78\x0F\x07" /* Y */
        "\x00\x00\x61\x71\x59\x4D\x47\x43" /* Z */
        "\x00\x00\x41\x41\x7F\x7F\x00\x00" /* [ */
        "\x06\x0C\x18\x30\x60\x40\x00\x00" /* FlippED ForwArD slAsh */
        "\x00\x00\x7F\x7F\x41\x41\x00\x00" /* ] */
        "\x00\x08\x04\x7E\x04\x08\x00\x00" /* ^ */
        "\x80\x80\x80\x80\x80\x80\x80\x00" /* _ */
        "\x00\x01\x03\x06\x04\x00\x00\x00" /* ` */
        "\x00\x00\x20\x74\x54\x54\x7C\x78" /* A */
        "\x00\x00\x7E\x7E\x48\x48\x78\x30" /* B */
        "\x00\x00\x38\x7C\x44\x44\x44\x00" /* C */
        "\x00\x00\x30\x78\x48\x48\x7E\x7E" /* D */
        "\x00\x00\x38\x7C\x54\x54\x5C\x18" /* E */
        "\x00\x00\x00\x08\x7C\x7E\x0A\x0A" /* F */
        "\x00\x00\x98\xBC\xA4\xA4\xFC\x7C" /* g */
        "\x00\x00\x7E\x7E\x08\x08\x78\x70" /* h */
        "\x00\x00\x00\x48\x7A\x7A\x40\x00" /* i */
        "\x00\x00\x00\x80\x80\x80\xFA\x7A" /* j */
        "\x00\x00\x7E\x7E\x10\x38\x68\x40" /* k */
        "\x00\x00\x00\x42\x7E\x7E\x40\x00" /* l */
        "\x00\x00\x7C\x7C\x18\x38\x1C\x7C" /* m */
        "\x00\x00\x7C\x7C\x04\x04\x7C\x78" /* n */
        "\x00\x00\x38\x7C\x44\x44\x7C\x38" /* o */
        "\x00\x00\xFC\xFC\x24\x24\x3C\x18" /* p */
        "\x00\x00\x18\x3C\x24\x24\xFC\xFC" /* q */
        "\x00\x00\x7C\x7C\x04\x04\x0C\x08" /* r */
        "\x00\x00\x48\x5C\x54\x54\x74\x24" /* s */
        "\x00\x00\x04\x04\x3E\x7E\x44\x44" /* t */
        "\x00\x00\x3C\x7C\x40\x40\x7C\x7C" /* u */
        "\x00\x00\x1C\x3C\x60\x60\x3C\x1C" /* v */
        "\x00\x00\x1C\x7C\x70\x38\x70\x7C" /* w */
        "\x00\x00\x44\x6C\x38\x38\x6C\x44" /* x */
        "\x00\x00\x9C\xBC\xA0\xE0\x7C\x3C" /* y */
        "\x00\x00\x44\x64\x74\x5C\x4C\x44" /* z */
        "\x00\x08\x08\x76\x42\x42\x00\x00" /* { */
        "\x00\x00\x00\x7E\x00\x00\x00\x00" /* | */
        "\x00\x42\x42\x76\x08\x08\x00\x00" /* } */
        "\x00\x00\x04\x02\x04\x02\x00\x00" /* ~ */;
    return add(font, c);
}