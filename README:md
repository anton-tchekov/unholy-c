# Unholy C Language

## Language Feature Documentation

### Variables

Local variables can be only be declared at the beginning of every block with the `var` keyword.
Every local variable is 32-bit in size.
Variables can not be initialized during declaration.

Variable names can only contain with letters, numbers or underscores.
Additionally, the first character can not be a number.

Example:

    {
        var value, number;
        var count;
    }

Global variables are not supported.

### Types

There are NO types: the meaning of the bits in a variable is
defined only by what YOU (the programmer) do with it.

Doing `var1 = var2` simply copies the bits from var2 into var1.

### Expressions

Expressions, used for example on the right hand side of an assignment,
consist only out of function calls.

Example:

    x = add(x, 1);

### Builtin Functions

Integers:

add, sub, mul, div

Equality:
eq (Equal), ne (Not Equal)

Integer Comparison:

There are two sets of integer comparison functions for signed
and unsigned numbers.

Unsigned:
| Mnemonic | Meaning          | Symbol |
|----------|------------------|--------|
|    hi    | Higher           |   >    |
|    hs    | Higher or Same   |   >=   |
|    ls    | Lower or Same    |   <=   |
|    lo    | Lower            |   <    |

Signed:
| Mnemonic | Meaning          | Symbol |
|----------|------------------|--------|
|    gt    | Greater Than     |   >    |
|    ge    | Greater or Equal |   >=   |
|    le    | Less or Equal    |   <=   |
|    lt    | Less Than        |   <    |

Bitwise operators:\
`or`: Bitwise OR\
`and`: Bitwise AND\
`xor`: Bitwise Exclusive OR\
`inv`: Invert all bits (one's complement)

Boolean operators:\
`not`: if argument 0, returns 1, else returns 0

Floating Point / Math Operations:


Characters:


### Functions

The program starts at the `main` function.

Example:

fn function_name(param0, param1, param2)
{

}

All functions have an implicit return value of 0.

return;

### Control Flow

Curly braces are mandatory.

#### Loops

There are only two types of loops: while and do..while

break and continue are supported. There is no goto.

#### Branches

if..elif..else


TODO:

- safe printf / varargs
- Cleanup
- Automated testing

