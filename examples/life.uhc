/* constants */
var WIDTH, HEIGHT;

fn main()
{
	var board1, board2;

	WIDTH = 40;
	HEIGHT = 20;

	board1 = 0x8000;
	board2 = 0x9000;

	/* glider */
	board_set(board1, 2, 1, 1);
	board_set(board1, 3, 2, 1);
	board_set(board1, 1, 3, 1);
	board_set(board1, 2, 3, 1);
	board_set(board1, 3, 3, 1);

	loop {
		board_draw(board1);
		board_update(board1, board2);
		board_draw(board2);
		board_update(board2, board1);
	}
}

fn board_update(board1, board2)
{
	var x, y, adj;

	for y = 0 to HEIGHT {
		for x = 0 to WIDTH {
			adj = _neighbours(board1, x, y);
			if lt(adj, 2) {
				board_set(board2, x, y, 0);
			}
			elif eq(adj, 2) {
				board_set(board2, x, y, board_get(board1, x, y));
			}
			elif eq(adj, 3) {
				board_set(board2, x, y, 1);
			}
			elif gt(adj, 3) {
				board_set(board2, x, y, 0);
			}
		}
	}
}

fn board_draw(board)
{
	var x, y;

	clear();
	for y = 0 to HEIGHT {
		for x = 0 to WIDTH {
			_draw_char(board_get(board, x, y));
		}

		print_char('\n');
	}
}

fn board_set(board, x, y, val)
{
	if _check_bounds(x, y) {
		return;
	}

	w8(_cell_ptr(board, x, y), val);
}

fn board_get(board, x, y)
{
	if _check_bounds(x, y) {
		return 0;
	}

	return ru8(_cell_ptr(board, x, y));
}

fn _cell_ptr(board, x, y)
{
	return add(board, add(mul(y, WIDTH), x));
}

fn _draw_char(v)
{
	var c;

	if v {
		c = 'X';
	}
	else {
		c = ' ';
	}

	print_char(c);
}

fn _check_bounds(x, y)
{
	if lt(x, 0) {
		return 1;
	}

	if lt(y, 0) {
		return 1;
	}

	if ge(x, WIDTH) {
		return 1;
	}

	if ge(y, HEIGHT) {
		return 1;
	}

	return 0;
}

fn _neighbours(board, x, y)
{
	var count, left, right, top, bottom;

	count = 0;

	left = sub(x, 1);
	right = add(x, 1);
	top = sub(y, 1);
	bottom = add(y, 1);

	/* top */
	if board_get(board, left, top) {
		count = add(count, 1);
	}

	if board_get(board, x, top) {
		count = add(count, 1);
	}

	if board_get(board, right, top) {
		count = add(count, 1);
	}

	/* middle */
	if board_get(board, left, y) {
		count = add(count, 1);
	}

	if board_get(board, right, y) {
		count = add(count, 1);
	}

	/* bottom */
	if board_get(board, left, bottom) {
		count = add(count, 1);
	}

	if board_get(board, x, bottom) {
		count = add(count, 1);
	}

	if board_get(board, right, bottom) {
		count = add(count, 1);
	}

	return count;
}

